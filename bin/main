#!/usr/bin/env ruby

#game is tic-tac-toe
#consists of 2 players
#each player chooses either 'X' or 'O'. We'll call these their letters
#the board consists of a 3x3 grid ie with 9 cells
#game starts with one player (could be random) entering their letter in any of the cells
#The next player then enters their letter and the game continues in alternating fashion
#Objective of the game is to fill in 3 cells in a row with your letter, that is horizontally, vertically, or diagonally.
#A player can seek to fill in cells to win or to block the other player's move.
#game ends in one of 2 scenarios: One player succeeds at filling 3 cells in a row or all cells are filled and no player wins, that is draw


#Here is the game flow
#Computer displays game board and prompts player to pick a cell in which to enter their letter. Cells are numbered 1-9
#Player 1 is 'X' by default, so computer can pick randomly who player 1 is.
#Once player one chooses a cell, computer displays message saying what player 1 did and asks player 2 to make a move in the same fashion
#At each iteration, the computer checks the state of the board to see if either player has won, if the board no longer has open cells
#At each iteration, the computer could also display the board.
#When game is over, computer displays 'game over' message, indicating who won, or indicating that game is a draw.
#Also, computer should not allow players to enter letters in a cell that is already occupied. or enter a number that is not on board.



#Computer asks for player's names 
puts "Enter first player name: "

player_1 = gets.chomp

puts "Enter second player name: "

player_2 = gets.chomp

#Computer assigns letters to players in a hash

players = {player_1: "X", player_2: "O"}


puts "#{player_1} will be 'X' and #{player_2} will be 'O'"

#Computer prompts first player to pick a cell to enter their letter.

puts "#{player_1}, please choose a cell between 1 and 9 to enter your letter: "

move = gets.chomp

puts "You have chosen cell #{move}."

#Computer will display new state of game board (preferably visually)

#Computer will internally check state of board. If win, if draw, if player specifies a cell number that isn't allowed, or if player tries to fill in occupied cell

puts "#{player_2}, please choose a cell between 1 and 9 to enter your letter: "

move = gets.chomp

puts "You have chosen cell #{move}."

#When 1 player wins

puts "#{player_1} has won. The game is over"

#When it is a draw

puts "There are no more empty cells. Game is over"
